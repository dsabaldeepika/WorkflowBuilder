1. **Initial State**:

   * The component should display a **large plus icon** when no nodes are selected.
   * The nodeList state should be initialized as an empty array.

2. **Node Selection**:

   * When a user selects a **subnode** (e.g., "Google Sheets → Read Data"):

     * The selected subnode should be added to the nodeList.
     * The popup should close automatically.
     * The **large plus icon** should be replaced by the selected node's **icon** in the same large form.

3. **Small Red Plus Icon**:

   * Once a node is selected, the pop-up should close and immediately followed by

     * A **small red plus icon** should appear to the **right of the large icon** ( not in the pop-up\_).
     * Clicking the small red plus icon should reopen the popup to allow adding more nodes.

4. **Dynamic Rendering**:

   * If the nodeList is empty:

     * Show the **large plus icon**.
   * If the nodeList contains nodes:

     * Show the **last added node's large icon** with the **small red plus icon**.

5. **Popup Behavior**:

   * The popup should display **node types** and their **sub-options**.
   * Clicking a node type should show its sub-options.
   * Clicking a sub-option should:

     * Add the subnode to the nodeList.
     * Close the popup.

---

### Implementation Plan

1. **State Management**:

   * Use useState to manage the nodeList (array of selected nodes).

2. **Handle Node Selection**:

   * Implement handleOptionSelect to:

     * Add the selected subnode to the nodeList.
     * Close the popup.

3. **Render Main Icon**:

   * Implement renderMainIcon to:

     * Show the **large plus icon** if nodeList is empty.
     * Show the **last added node's large icon** with a **small red plus icon** if nodeList contains nodes.

4. **Popup Logic**:

   * Use Dialog to display the popup.
   * Show node types and their sub-options dynamically.

5. **Small Red Plus Icon**:

   * Add a small red plus icon to the right of the large icon.
   * Add a click handler to reopen the popup.

---

act as mean expert in the requirement clarification and implement the above changes , actually we are creating a workflow creator, so

ant to upgrade my workflow builder to mimic the node-adding UX from n8n and Make.com.
When the user clicks the big "+" button, a modal should open showing all available apps (with icons and search). When an app is selected, the modal should show that app’s modules/actions (like "Read", "Write", etc). When a module is selected, the modal closes and the "+" button is replaced by a node on the canvas showing the app’s icon and the operation name.

Please update my React/TypeScript code to implement this flow.

Use the data structures above for apps and nodes.

Maintain state using React hooks.

The modal should be accessible and support search/filter.

The node should be draggable and connectable (using React Flow).

Bonus: persist workflow state to localStorage.

Here is my sample code\:setNodes(\[...nodes, {
id: uuid(),
type: module.type,
position: { x: 100, y: 100 },
data: { appId: app.id, moduleId: module.id }
}])
const \[nodes, setNodes] = useState\<WorkflowNode\[]>(\[]);
const \[isModalOpen, setModalOpen] = useState(false);
const \[selectedApp, setSelectedApp] = useState\<App | null>(null);
const \[selectedModule, setSelectedModule] = useState\<Module | null>(null);

// apps.ts
export const apps = \[
{
id: 'google-sheets',
label: 'Google Sheets',
icon: '/icons/sheets.svg',
modules: \[
{ id: 'watch-new-rows', label: 'Watch New Rows', description: 'Triggers when a new row is added.', type: 'trigger' },
{ id: 'add-row', label: 'Add a Row', description: 'Appends a new row.', type: 'action' },
// ...
],
},
// ... other apps
];
Upgrade my workflow builder so that when the user clicks the large "+" button, a modal (pop-up) appears with a searchable list of available apps (like Google Sheets, OpenAI, HTTP, etc). When the user clicks an app, the modal should show a second step listing that app’s available modules or actions (e.g., for Google Sheets: "Read", "Write", "Watch New Rows", etc). When the user selects a module/action, the modal closes, and the "+" button on the canvas is replaced by a node displaying the app’s icon and the selected operation as its label.

now update the code I uploaded as files .

Requirements:

1. UI/UX Flow
   When clicking the "+" button on the workflow canvas, open a modal centered on the screen.

The modal’s first step is a searchable list of all available apps, each with an icon and label.

Clicking an app transitions the modal to a second step, showing that app’s available modules/actions (with icons and descriptions).

Clicking a module/action closes the modal and replaces the "+" button with a node on the canvas showing:

The app’s icon

The operation name as the node label

The node should be draggable and connectable for future steps.

If the user clicks on the node, allow editing or changing the operation (optional for v1).

2. Data Structures
   App Catalog:

Each app has: id, label, icon, and a list of modules.

Each module has: id, label, description, type (e.g., trigger/action).

Workflow State:

Store the current nodes as an array, each with: id, type, position, data (including appId, moduleId, config).

Maintain the state in a React context or store (e.g., useState, useContext, or Redux if scaling).

Optionally persist state to localStorage for reload resilience.

3. State Management
   Use React state (or context) to track:

Current open/closed state of the modal

Which app is selected (if any)

Which module is selected (if any)

The list of nodes on the canvas

When a module is selected, update the workflow state to add a new node and close the modal.

4. Component Structure
   PlusButton: The large "+" button on the canvas

NodePickerModal: The modal with two steps: app selection, then module selection

WorkflowCanvas: The React Flow canvas that renders nodes and edges

WorkflowNode: The node component that displays the app icon and operation

5. Visual/UX Details
   Modal should have a search bar for filtering apps/modules.

Each app/module in the list should have a clear icon and label.

The selected node should visually stand out on the canvas.

Support keyboard navigation and accessibility in the modal.
create multiple components as necessary , be modular, I have a shell project already created I need a workflowbuilder shell to route when someone clicks on create. workflow builder
